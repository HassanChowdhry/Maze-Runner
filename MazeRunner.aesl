<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->
<constant value="0" name="STOPPED"/>
<constant value="1" name="IDENTIFY"/>
<constant value="4300" name="FRONTHRESH"/>
<constant value="4000" name="SIDETHRESH"/>
<constant value="2" name="FL"/>
<constant value="230" name="SPEED"/>
<constant value="150" name="EDGE"/>
<constant value="3" name="TURN"/>
<constant value="4" name="LEFT"/>
<constant value="5" name="RIGHT"/>
<constant value="6" name="PAUSED"/>
<constant value="7" name="TURN2"/>
<constant value="8" name="GREY"/>
<constant value="9" name="BLACK"/>


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="1" name="thymio-II">var state = STOPPED
var front = 32
var leftLight = 32
var rightLight = 32
var counter = 0
var code1 = 0 # 0 Left for and 1 for right first barcode
var code2 = 0 # same but for 2nd barcode
var lineCounter = 0
var RGB[3] = [0, 0, 0]
var max
var min
var mean
var wallCount = 0

onevent button.forward
    motor.left.target = SPEED
    motor.right.target = SPEED
    state = FL

  
onevent button.backward
  callsub stop
  call leds.top(0, 0, 0)

  
onevent prox
	if state == TURN or state == STOPPED or state == PAUSED or state == GREY then
		return
	end
	timer.period[1] = 0
	timer.period[0] = 0
	if counter &lt;= 4 then
		if (state == LEFT or state == FL) and prox.ground.delta[0] &lt;= EDGE then
			state = RIGHT
			motor.right.target = SPEED
			motor.left.target = 0
		end
	
		if (state == RIGHT or state == FL) and prox.ground.delta[1] &lt;= EDGE then
			state = LEFT
			motor.right.target = 0
			motor.left.target = SPEED
		end
	
		# movement incase robot gets close to the wall
		if prox.horizontal[0] >= (SIDETHRESH - 300) and counter != 3 then
			state = TURN
			motor.left.target = SPEED
			motor.right.target = 0
			timer.period[1] = 200
		elseif prox.horizontal[4] >= (SIDETHRESH - 300) and counter != 3 then
			state = TURN
			motor.left.target = 0
			motor.right.target = SPEED
			timer.period[1] = 200
		end
	
		callsub identify
	
		# reading for first barcode
		if counter == 0 then
			if leftLight == 32 then
				motor.left.target = -SPEED
				motor.right.target = SPEED
				counter++
				state = TURN
				timer.period[1] = 900
			elseif rightLight == 32 then
				motor.left.target = SPEED
				motor.right.target = -SPEED
				counter++
				state = TURN
				code1 = 1
				timer.period[1] = 900
			end
		# reading for 2nd and 3rd barcode
		elseif (counter == 1 or counter == 2) and (leftLight == 32 or rightLight == 32 or front == 32) then
			if counter == 1 then
				if leftLight == 32 then
					code2 = 0
				elseif rightLight == 32 then
					code2 = 1
				end
			
				state = TURN
				if code1 == 1 then
					motor.left.target = -SPEED
					motor.right.target = SPEED
				elseif code1 == 0 then
					motor.left.target = SPEED
					motor.right.target = -SPEED
				end
				timer.period[1] = 950
				counter++
			elseif counter == 2 then
				state = TURN
				if code1 == 1 then
					motor.left.target = -SPEED
					motor.right.target = SPEED
				elseif code1 == 0 then
					motor.left.target = SPEED
					motor.right.target = -SPEED
				end
				timer.period[1] = 1000	
				counter++
				RGB[0] = leftLight
				RGB[1] = front
				RGB[2] = rightLight
			end
		elseif counter == 3 then
			timer.period[1] = 4500
		elseif counter == 4 then
			timer.period[1] = 950
		end
	else 
		if  lineCounter &lt;= 5 then
			if prox.ground.delta[0] &lt; EDGE or prox.ground.delta[1] &lt; EDGE then
				lineCounter++
			end
			if lineCounter == 5 then
				lineCounter++
				motor.right.target = 0
				motor.left.target = 0
				state = PAUSED
				call leds.top(32, 0, 0)
				call sound.freq(200, 0)
				timer.period[1] = 5000
			end
		else
			if prox.horizontal[0] >= (SIDETHRESH - 200) or prox.horizontal[1] >= SIDETHRESH then
				state = TURN
				motor.left.target = SPEED
				motor.right.target = 0
				timer.period[1] = 200
			elseif prox.horizontal[4] >= (SIDETHRESH - 200) or  prox.horizontal[3] >= SIDETHRESH then
				state = TURN
				motor.left.target = 0
				motor.right.target = SPEED
				timer.period[1] = 200
			end
			
			if prox.horizontal[2] > FRONTHRESH and wallCount == 0 then
				state = TURN
				if  code2 == 1 then
					motor.right.target = -SPEED
					motor.left.target = SPEED
				elseif  code2 == 0 then
					motor.right.target = SPEED
					motor.left.target = -SPEED
				end
					wallCount = 1
					timer.period[1] = 1000
			elseif prox.horizontal[2] > FRONTHRESH and wallCount == 1 then
				state = TURN
				if  code2 == 1 then
					motor.right.target = SPEED
					motor.left.target = -SPEED
				elseif code2 == 0 then
					state = TURN
					motor.right.target = -SPEED
					motor.left.target = SPEED
				end
					wallCount = 2
					timer.period[1] = 1000
			elseif wallCount == 2 then
				timer.period[0] = 4000
			elseif wallCount == 3 then
				timer.period[0] = 1000
			elseif wallCount == 4 then
				state = GREY
				timer.period[0] = 1500
			elseif wallCount == 5 and (prox.ground.delta[0] &lt; EDGE or prox.ground.delta[1] &lt; EDGE) 	then
				callsub stop
			end
		end
	end
	
onevent timer0
	if state == FL then
    		state = TURN2
    		if code2 == 1 then
			motor.right.target = SPEED
			motor.left.target = -SPEED
		elseif code2 == 0 then
			motor.right.target = -SPEED
			motor.left.target = SPEED
		end
		wallCount = 3
   	else
		state = FL
		motor.left.target = SPEED
   	 	motor.right.target = SPEED
    	  	if  wallCount == 3 then
    	  		wallCount = 4
    	  	elseif wallCount == 4 then
    	  		wallCount = 5
    	  	end
   	end
	

onevent timer1
    if state == FL then
    		state = TURN2
    		if code1 == 0 then
			motor.right.target = SPEED
			motor.left.target = -SPEED
		elseif code1 == 1 then
			motor.right.target = -SPEED
			motor.left.target = SPEED
		end
		counter++
   	else
		state = FL
		motor.left.target = SPEED
   	 	motor.right.target = SPEED
  	  	if counter == 4 then
    			counter++
		end
		call sound.freq(10, -1)
   	end
   	call leds.top(0, 0, 0)

# Subroutines
sub identify	
	if prox.horizontal[2] > FRONTHRESH then
		front = 32
		call leds.circle(front, rightLight, 0, 0, 0 ,0 ,0 ,leftLight)
	else
		front = 0
		call leds.circle(front, rightLight, 0, 0, 0 ,0 ,0 ,leftLight)
	end
	
	if  prox.horizontal[1] > SIDETHRESH then
	 	leftLight = 32
		call leds.circle(front, rightLight, 0, 0, 0 ,0 ,0 ,leftLight)
	else
		leftLight = 0
		call leds.circle(front, rightLight, 0, 0, 0 ,0 ,0 ,leftLight)
	end
			
	if  prox.horizontal[3] > SIDETHRESH then
		rightLight = 32
		call leds.circle(front, rightLight, 0, 0, 0 ,0 ,0 ,leftLight)
	else
		rightLight = 0
		call leds.circle(front, rightLight, 0, 0, 0 ,0 ,0 ,leftLight)
	end
		

		
sub stop
  state = STOPPED
  motor.left.target = 0
  motor.right.target = 0
  timer.period[1] = 0
  timer.period[0] = 0
  counter = 0
  wallCount = 0
  lineCounter = 0
  code1 = 0
  code2 = 0
  call leds.circle(0, 0, 0, 0, 0 ,0 ,0 ,0)
  call leds.top(RGB[0], RGB[1], RGB[2])
</node>


</network>
